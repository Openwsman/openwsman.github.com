var search_data = {"index":{"searchIndex":["clientoptions","openwsman","openwsman","client","context","endpointreference","enumerateinfo","fault","filter","soap","soapop","status","transport","xmlattr","xmldoc","xmlnode","action()","add()","add_before()","add_option()","add_property()","add_selector()","add_selector()","agent()","agent=()","associators()","attr()","attr_add()","attr_count()","attr_find()","auth_method()","auth_method=()","auth_name()","auth_request_callback()","auth_value()","body()","build_envelope_from_response()","cainfo()","cainfo=()","calocal()","calocal=()","caoid()","caoid=()","capath()","capath=()","cert()","cert=()","certhumbprint()","certhumbprint=()","child()","cim_namespace()","cim_namespace=()","classname()","classname()","clear_dump_request()","clear_flags()","clone()","close()","cmp()","code()","code()","code=()","context()","context()","cql()","create()","create_context()","create_doc_from_file()","create_doc_from_string()","create_ep_context()","create_response_envelope()","create_soap_envelope()","debug()","debug=()","delete()","delete_from_epr()","delivery_mode()","delivery_mode=()","delivery_sec_mode()","delivery_security_mode=()","delivery_uri()","delivery_uri=()","detail()","detail()","detail=()","doc()","dump_file()","dump_file()","dumpfile=()","each()","each()","each_attr()","element()","encode()","encoding()","encoding()","encoding=()","enum_idle_timeout=()","enumerate()","envelope()","epr()","epr_prefix_for()","epr_to()","epr_uri()","epr_uri_for()","error_string()","fault()","fault_string()","filter()","find()","flags()","flags()","flags=()","fragment()","fragment=()","fragment_string()","generate_fault()","generate_fault()","get()","get()","get_from_epr()","header()","heartbeat_interval()","heartbeat_interval=()","host()","identify()","index()","index=()","indoc()","indoc()","indoc=()","invoke()","is_auth_method()","is_end_of_sequence()","is_fault()","key()","key=()","lang=()","last_error()","max_elements()","max_elements()","max_elements=()","max_envelope_size()","max_envelope_size()","max_envelope_size=()","max_items()","max_items=()","maxsize()","method()","method_args()","msg()","msg()","msg=()","name()","name()","name=()","namespace()","new()","new()","new()","new()","new()","new()","next()","ns()","ns()","ns=()","option_set()","options()","options=()","outdoc()","outdoc=()","parent()","parse_enum_request()","password()","password()","password=()","path()","port()","prefix()","prefix()","properties()","properties=()","proxy()","proxy=()","proxy_password()","proxy_password=()","proxy_username()","proxy_username=()","proxyauth()","proxyauth=()","pull()","pull_result()","pull_result=()","put()","reason()","reference()","reference=()","references()","release()","remove()","renew()","reset_flags()","resource_uri()","resource_uri()","response_code()","root()","runtime()","scheme()","selector()","selector()","selector_count()","selector_names()","selectors()","selectors()","selectors=()","selectors_from_epr()","selectors_from_filter()","send_request()","serialize()","set_dump_request()","simple()","size()","soap()","string()","string()","sub_expiry()","sub_expiry=()","subcode()","subscribe()","text()","text=()","timeout()","timeout()","timeout=()","timeout=()","to_s()","to_s()","to_xml()","total_items()","total_items=()","transport()","unsubscribe()","uri_classname()","uri_prefix()","user()","username()","username=()","value()","verify_host()","verify_host=()","verify_peer()","verify_peer=()","wql()","xpath()","readme"],"longSearchIndex":["clientoptions","openwsman","openwsman","openwsman::client","openwsman::context","openwsman::endpointreference","openwsman::enumerateinfo","openwsman::fault","openwsman::filter","openwsman::soap","openwsman::soapop","openwsman::status","openwsman::transport","openwsman::xmlattr","openwsman::xmldoc","openwsman::xmlnode","openwsman::context#action()","openwsman::xmlnode#add()","openwsman::xmlnode#add_before()","clientoptions#add_option()","clientoptions#add_property()","clientoptions#add_selector()","openwsman::endpointreference#add_selector()","openwsman::transport#agent()","openwsman::transport#agent=()","openwsman::filter#associators()","openwsman::xmlnode#attr()","openwsman::xmlnode#attr_add()","openwsman::xmlnode#attr_count()","openwsman::xmlnode#attr_find()","openwsman::transport#auth_method()","openwsman::transport#auth_method=()","openwsman::transport#auth_name()","openwsman::transport::auth_request_callback()","openwsman::transport#auth_value()","openwsman::xmldoc#body()","openwsman::client#build_envelope_from_response()","openwsman::transport#cainfo()","openwsman::transport#cainfo=()","openwsman::transport#calocal()","openwsman::transport#calocal=()","openwsman::transport#caoid()","openwsman::transport#caoid=()","openwsman::transport#capath()","openwsman::transport#capath=()","openwsman::transport#cert()","openwsman::transport#cert=()","openwsman::transport#certhumbprint()","openwsman::transport#certhumbprint=()","openwsman::xmlnode#child()","clientoptions#cim_namespace()","clientoptions#cim_namespace=()","openwsman::context#classname()","openwsman::endpointreference#classname()","clientoptions#clear_dump_request()","clientoptions#clear_flags()","openwsman::endpointreference#clone()","openwsman::transport#close()","openwsman::endpointreference#cmp()","openwsman::fault#code()","openwsman::status#code()","openwsman::status#code=()","openwsman::soap#context()","openwsman::xmldoc#context()","openwsman::filter#cql()","openwsman::client#create()","openwsman::soap#create_context()","openwsman#create_doc_from_file()","openwsman#create_doc_from_string()","openwsman::soap#create_ep_context()","openwsman::xmldoc#create_response_envelope()","openwsman#create_soap_envelope()","openwsman#debug()","openwsman#debug=()","openwsman::client#delete()","openwsman::client#delete_from_epr()","clientoptions#delivery_mode()","clientoptions#delivery_mode=()","clientoptions#delivery_sec_mode()","clientoptions#delivery_security_mode=()","clientoptions#delivery_uri()","clientoptions#delivery_uri=()","openwsman::fault#detail()","openwsman::status#detail()","openwsman::status#detail=()","openwsman::xmlnode#doc()","openwsman::xmldoc#dump_file()","openwsman::xmlnode#dump_file()","openwsman::client#dumpfile=()","openwsman::endpointreference#each()","openwsman::xmlnode#each()","openwsman::xmlnode#each_attr()","openwsman::xmldoc#element()","openwsman::xmldoc#encode()","openwsman::client#encoding()","openwsman::enumerateinfo#encoding()","openwsman::client#encoding=()","openwsman::context#enum_idle_timeout=()","openwsman::client#enumerate()","openwsman::xmldoc#envelope()","openwsman::xmlnode#epr()","openwsman::epr_prefix_for()","openwsman::enumerateinfo#epr_to()","openwsman::enumerateinfo#epr_uri()","openwsman::epr_uri_for()","openwsman::transport#error_string()","openwsman::xmldoc#fault()","openwsman::client#fault_string()","openwsman::enumerateinfo#filter()","openwsman::xmlnode#find()","clientoptions#flags()","openwsman::enumerateinfo#flags()","clientoptions#flags=()","clientoptions#fragment()","clientoptions#fragment=()","openwsman::context#fragment_string()","openwsman::status#generate_fault()","openwsman::xmldoc#generate_fault()","openwsman::client#get()","openwsman::xmlnode#get()","openwsman::client#get_from_epr()","openwsman::xmldoc#header()","clientoptions#heartbeat_interval()","clientoptions#heartbeat_interval=()","openwsman::client#host()","openwsman::client#identify()","openwsman::enumerateinfo#index()","openwsman::enumerateinfo#index=()","openwsman::context#indoc()","openwsman::soapop#indoc()","openwsman::soapop#indoc=()","openwsman::client#invoke()","openwsman::transport#is_auth_method()","openwsman::xmldoc#is_end_of_sequence()","openwsman::xmldoc#is_fault()","openwsman::transport#key()","openwsman::transport#key=()","openwsman::xmlnode#lang=()","openwsman::client#last_error()","clientoptions#max_elements()","openwsman::context#max_elements()","clientoptions#max_elements=()","clientoptions#max_envelope_size()","openwsman::context#max_envelope_size()","clientoptions#max_envelope_size=()","openwsman::enumerateinfo#max_items()","openwsman::enumerateinfo#max_items=()","openwsman::soapop#maxsize()","openwsman::context#method()","openwsman::context#method_args()","openwsman::soapop#msg()","openwsman::status#msg()","openwsman::status#msg=()","openwsman::xmlattr#name()","openwsman::xmlnode#name()","openwsman::xmlnode#name=()","openwsman::endpointreference#namespace()","openwsman::client::new()","openwsman::endpointreference::new()","openwsman::fault::new()","openwsman::filter::new()","openwsman::status::new()","openwsman::xmldoc::new()","openwsman::xmlnode#next()","openwsman::xmlattr#ns()","openwsman::xmlnode#ns()","openwsman::xmlnode#ns=()","openwsman::context#option_set()","clientoptions#options()","clientoptions#options=()","openwsman::soapop#outdoc()","openwsman::soapop#outdoc=()","openwsman::xmlnode#parent()","openwsman::context#parse_enum_request()","openwsman::client#password()","openwsman::transport#password()","openwsman::transport#password=()","openwsman::client#path()","openwsman::client#port()","openwsman::endpointreference#prefix()","openwsman::xmlnode#prefix()","clientoptions#properties()","clientoptions#properties=()","openwsman::transport#proxy()","openwsman::transport#proxy=()","openwsman::transport#proxy_password()","openwsman::transport#proxy_password=()","openwsman::transport#proxy_username()","openwsman::transport#proxy_username=()","openwsman::transport#proxyauth()","openwsman::transport#proxyauth=()","openwsman::client#pull()","openwsman::enumerateinfo#pull_result()","openwsman::enumerateinfo#pull_result=()","openwsman::client#put()","openwsman::fault#reason()","clientoptions#reference()","clientoptions#reference=()","openwsman::filter#references()","openwsman::client#release()","openwsman::xmlattr#remove()","openwsman::client#renew()","clientoptions#reset_flags()","openwsman::context#resource_uri()","openwsman::endpointreference#resource_uri()","openwsman::client#response_code()","openwsman::xmldoc#root()","openwsman::context#runtime()","openwsman::client#scheme()","openwsman::context#selector()","openwsman::endpointreference#selector()","openwsman::endpointreference#selector_count()","openwsman::endpointreference#selector_names()","clientoptions#selectors()","openwsman::context#selectors()","clientoptions#selectors=()","openwsman::context#selectors_from_epr()","openwsman::context#selectors_from_filter()","openwsman::client#send_request()","openwsman::endpointreference#serialize()","clientoptions#set_dump_request()","openwsman::filter#simple()","openwsman::xmlnode#size()","openwsman::soapop#soap()","openwsman::xmldoc#string()","openwsman::xmlnode#string()","clientoptions#sub_expiry()","clientoptions#sub_expiry=()","openwsman::fault#subcode()","openwsman::client#subscribe()","openwsman::xmlnode#text()","openwsman::xmlnode#text=()","clientoptions#timeout()","openwsman::transport#timeout()","clientoptions#timeout=()","openwsman::transport#timeout=()","openwsman::endpointreference#to_s()","openwsman::status#to_s()","openwsman::endpointreference#to_xml()","openwsman::enumerateinfo#total_items()","openwsman::enumerateinfo#total_items=()","openwsman::client#transport()","openwsman::client#unsubscribe()","openwsman#uri_classname()","openwsman#uri_prefix()","openwsman::client#user()","openwsman::transport#username()","openwsman::transport#username=()","openwsman::xmlattr#value()","openwsman::transport#verify_host()","openwsman::transport#verify_host=()","openwsman::transport#verify_peer()","openwsman::transport#verify_peer=()","openwsman::filter#wql()","openwsman::filter#xpath()",""],"info":[["ClientOptions","","ClientOptions.html","","<p>*\n<p>ClientOptions control the behaviour of the Client connection\n\n<p>*\n"],["Openwsman","","Openwsman.html","",""],["Openwsman","","Openwsman.html","","<p>About openwsman\n<p>Openwsman (www.openwsman.org) is a project intended to provide an\nopen-source implementation …\n"],["Openwsman::Client","","Openwsman/Client.html","","<p>*\n<p>Instances of Client represent a connection to a client used for\n<p>sending WS-Management operation requests. …\n"],["Openwsman::Context","","Openwsman/Context.html","","<p>*\n<p>Context contains all information of an ongoing SOAP operation\n\n<p>*\n"],["Openwsman::EndPointReference","","Openwsman/EndPointReference.html","","<p>*\n<p>The EndPointReference is a stub to proxy server-side operations\n\n<p>*\n"],["Openwsman::EnumerateInfo","","Openwsman/EnumerateInfo.html","","<p>*\n<p>EnumerateInfo contains all information related to an enumeration\n<p>request.\n"],["Openwsman::Fault","","Openwsman/Fault.html","","<p>*\n<p>Fault represents details of a failed WS-Management operation\n\n<p>* */\n"],["Openwsman::Filter","","Openwsman/Filter.html","","<p>*\n<p>Filter are evaluated on the server side and help to reduce the amount\n<p>of processing and information transport. …\n"],["Openwsman::Soap","","Openwsman/Soap.html","","<p>*\n<p>Soap represents a part of a SoapOp used to create and reference\n<p>context information.\n"],["Openwsman::SoapOp","","Openwsman/SoapOp.html","","<p>*\n<p>SoapOp represents a SOAP operation\n\n<p>* */\n"],["Openwsman::Status","","Openwsman/Status.html","","<p>*\n<p>Status represents the detailed status of a (failed) WS-Management\n<p>operation.\n"],["Openwsman::Transport","","Openwsman/Transport.html","","<p>*\n<p>Transport reflects details of the http(s) transport layer between\n<p>client and server.\n"],["Openwsman::XmlAttr","","Openwsman/XmlAttr.html","","<p>An XmlAttr is a key/value pair representing an attribute of a node.\n\n<p>*\n<p>An attribute has\n"],["Openwsman::XmlDoc","","Openwsman/XmlDoc.html","","<p>*\n<p>XmlDoc holds an XML document and thus represents the root of an XML\n<p>tree. XmlDoc is optimized for SOAP …\n"],["Openwsman::XmlNode","","Openwsman/XmlNode.html","","<p>*\n<p>XmlNode is a node inside the XML document tree.\n\n<p>*\n"],["action","Openwsman::Context","Openwsman/Context.html#method-i-action","(p1)","<p>/*\n\n<pre>* The action\n*</pre>\n"],["add","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-add","(p1, p2, p3)","<p>add child (namespace, name, text) to node\n"],["add_before","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-add_before","(p1, p2, p3)","<p>add child (namespace, name, text) before(!) node\n"],["add_option","ClientOptions","ClientOptions.html#method-i-add_option","(p1, p2)","<p>/*\n\n<pre>* Add an option (for OptionSet) as key/value pair\n*\n* NOTE:\n* the value must be properly escaped (replace ...</pre>\n"],["add_property","ClientOptions","ClientOptions.html#method-i-add_property","(p1, p2)","<p>/*\n\n<pre>* Add a property as key/value pair\n*\n*</pre>\n"],["add_selector","ClientOptions","ClientOptions.html#method-i-add_selector","(p1, p2)","<p>/*\n\n<pre>* Add a selector as key/value pair\n*\n* NOTE:\n* the value must be properly escaped (replace &amp; with &amp;amp;, ...</pre>\n"],["add_selector","Openwsman::EndPointReference","Openwsman/EndPointReference.html#method-i-add_selector","(p1, p2)","<p>Add selector as key/value pair\n"],["agent","Openwsman::Transport","Openwsman/Transport.html#method-i-agent","()","<p>/*\n\n<pre>* Get the HTTP agent identifier string\n*</pre>\n"],["agent=","Openwsman::Transport","Openwsman/Transport.html#method-i-agent-3D","(p1)","<p>/*\n\n<pre>* Set the HTTP agent identifier (User-agent:) string\n*\n* This is how the client will show up in the ...</pre>\n"],["associators","Openwsman::Filter","Openwsman/Filter.html#method-i-associators","(p1, p2, p3, p4, p5, p6, p7)","<p>Set associators filter\n"],["attr","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-attr","(p1, p2)","<p>/*\n\n<pre>* get node attribute by index or name\n*\n*</pre>\n"],["attr_add","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-attr_add","(p1, p2, p3)","<p>/*\n\n<pre>* add attribute to node\n*\n*</pre>\n"],["attr_count","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-attr_count","()","<p>/*\n\n<pre>* count node attribute\n*\n*</pre>\n"],["attr_find","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-attr_find","(p1, p2)","<p>/*\n\n<pre>* find node attribute by name\n*\n*</pre>\n"],["auth_method","Openwsman::Transport","Openwsman/Transport.html#method-i-auth_method","()","<p>/*\n\n<pre>* Set the authentication method\n*</pre>\n"],["auth_method=","Openwsman::Transport","Openwsman/Transport.html#method-i-auth_method-3D","(p1)","<p>Set the authentication method Value must be one of:\n\n<pre>+Openwsman::NO_AUTH_STR+\n+Openwsman::BASIC_AUTH_STR+ ...</pre>\n"],["auth_name","Openwsman::Transport","Openwsman/Transport.html#method-i-auth_name","(p1)","<p>/*\n\n<pre>* Set the authentication method string corresponding to the given\n* auth method id\n*\n* Value must be ...</pre>\n"],["auth_request_callback","Openwsman::Transport","Openwsman/Transport.html#method-c-auth_request_callback","(client, auth_type)","<p>called when authentication credentials missing or wrong\n"],["auth_value","Openwsman::Transport","Openwsman/Transport.html#method-i-auth_value","()","<p>Get the authentication method integer id\n"],["body","Openwsman::XmlDoc","Openwsman/XmlDoc.html#method-i-body","()","<p>get soap body node\n"],["build_envelope_from_response","Openwsman::Client","Openwsman/Client.html#method-i-build_envelope_from_response","()","<p>Build envelope from response\n"],["cainfo","Openwsman::Transport","Openwsman/Transport.html#method-i-cainfo","()","<p>/*\n\n<pre>* Get the certification authority (CAINFO)\n*</pre>\n"],["cainfo=","Openwsman::Transport","Openwsman/Transport.html#method-i-cainfo-3D","(p1)","<p>Set the certification authority (CAINFO)\n"],["calocal","Openwsman::Transport","Openwsman/Transport.html#method-i-calocal","()","<p>/*\n\n<pre>* Windows client\n*\n* Use local CA ?\n*</pre>\n"],["calocal=","Openwsman::Transport","Openwsman/Transport.html#method-i-calocal-3D","(p1)","<p>Windows client\n<p>Use local CA ?\n"],["caoid","Openwsman::Transport","Openwsman/Transport.html#method-i-caoid","()","<p>Windows client\n<p>Get the CA OID\n"],["caoid=","Openwsman::Transport","Openwsman/Transport.html#method-i-caoid-3D","(p1)","<p>Windows client\n<p>Set the CA OID\n<p>Reference\n"],["capath","Openwsman::Transport","Openwsman/Transport.html#method-i-capath","()","<p>Get the path to the certification authority (CAINFO) store\n"],["capath=","Openwsman::Transport","Openwsman/Transport.html#method-i-capath-3D","(p1)","<p>Set the path to the certification authority (CAINFO) store\n"],["cert","Openwsman::Transport","Openwsman/Transport.html#method-i-cert","()","<p>Get the certificate\n"],["cert=","Openwsman::Transport","Openwsman/Transport.html#method-i-cert-3D","(p1)","<p>Set the certificate\n"],["certhumbprint","Openwsman::Transport","Openwsman/Transport.html#method-i-certhumbprint","()","<p>/*\n\n<pre>* Set the certification thumbprint\n*</pre>\n"],["certhumbprint=","Openwsman::Transport","Openwsman/Transport.html#method-i-certhumbprint-3D","(p1)","<p>Set the certification thumbprint\n"],["child","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-child","()","<p>/*\n\n<pre>* get first child of node\n*\n*</pre>\n"],["cim_namespace","ClientOptions","ClientOptions.html#method-i-cim_namespace","()","<p>/*\n\n<pre>* Get CIM Namespace for Openwsman\n* Note:\n* Microsoft WinRM set the resource namespace by attaching ...</pre>\n"],["cim_namespace=","ClientOptions","ClientOptions.html#method-i-cim_namespace-3D","(p1)","<p>/*\n\n<pre>* Set CIM Namespace for Openwsman\n* (default is root/cimv2)\n* Note:\n* Microsoft WinRM set the resource ...</pre>\n"],["classname","Openwsman::Context","Openwsman/Context.html#method-i-classname","()","<p>/*\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">*</span> <span class=\"ruby-constant\">The</span> <span class=\"ruby-keyword\">class</span> <span class=\"ruby-identifier\">name</span>\n<span class=\"ruby-operator\">*</span>\n</pre>\n"],["classname","Openwsman::EndPointReference","Openwsman/EndPointReference.html#method-i-classname","(p1)","<p>Classname of EPR\n"],["clear_dump_request","ClientOptions","ClientOptions.html#method-i-clear_dump_request","(p1)","<p>/*\n\n<pre>* Reset dump all operations to the dumpfile\n*\n* Used for debugging on the wire-level\n*\n* See also: ...</pre>\n"],["clear_flags","ClientOptions","ClientOptions.html#method-i-clear_flags","(p1)","<p>clear option flag(s)\n<p>clears specific flag(s) from options\n"],["clone","Openwsman::EndPointReference","Openwsman/EndPointReference.html#method-i-clone","(p1)","<p>clone the EndPointReference instance\n"],["close","Openwsman::Transport","Openwsman/Transport.html#method-i-close","()","<p>Close the transport. No further communication possible.\n"],["cmp","Openwsman::EndPointReference","Openwsman/EndPointReference.html#method-i-cmp","(p1)","<p>Compare two EndPointReferences\n"],["code","Openwsman::Fault","Openwsman/Fault.html#method-i-code","()","<p>/*\n\n<pre>* Fault code\n*</pre>\n"],["code","Openwsman::Status","Openwsman/Status.html#method-i-code","()","<p>/*\n\n<pre>* Get the fault code\n*</pre>\n"],["code=","Openwsman::Status","Openwsman/Status.html#method-i-code-3D","(p1)","<p>/*\n\n<pre>* Set the fault code\n*</pre>\n"],["context","Openwsman::Soap","Openwsman/Soap.html#method-i-context","()","<p>Get the current Context\n"],["context","Openwsman::XmlDoc","Openwsman/XmlDoc.html#method-i-context","()","<p>get enumeration context as string return nil if context not present or\nempty\n"],["cql","Openwsman::Filter","Openwsman/Filter.html#method-i-cql","(p1)","<p>Set CQL (CIM query language) filter\n"],["create","Openwsman::Client","Openwsman/Client.html#method-i-create","(p1, p2, p3, p4, p5)","<p>WS-Create\n<p>create: Create a resource\n"],["create_context","Openwsman::Soap","Openwsman/Soap.html#method-i-create_context","()","<p>/*\n\n<pre>* Create a new Context\n*</pre>\n"],["create_doc_from_file","Openwsman","Openwsman.html#method-i-create_doc_from_file","(p1, p2)","<p>Read XmlDoc from file\n"],["create_doc_from_string","Openwsman","Openwsman.html#method-i-create_doc_from_string","(p1, p2)","<p>Read XmlDoc from string\n"],["create_ep_context","Openwsman::Soap","Openwsman/Soap.html#method-i-create_ep_context","(p1)","<p>Create a new endpoint Context\n"],["create_response_envelope","Openwsman::XmlDoc","Openwsman/XmlDoc.html#method-i-create_response_envelope","(p1)","<p>Generate response envelope document, optionally relating to a specific\naction.\n<p>This creates a new XmlDoc …\n"],["create_soap_envelope","Openwsman","Openwsman.html#method-i-create_soap_envelope","(p1)","<p>/*\n\n<pre>* Create empty SOAP envelope\n*</pre>\n"],["debug","Openwsman","Openwsman.html#method-i-debug","(p1)","<p>/*\n\n<pre>* Return openwsman debug level.\n*</pre>\n"],["debug=","Openwsman","Openwsman.html#method-i-debug-3D","(p1)","<p>/*\n\n<pre>* Set openwsman debug level.\n*</pre>\n"],["delete","Openwsman::Client","Openwsman/Client.html#method-i-delete","(p1, p2)","<p>WS-Transport\n<p>delete: Delete a resource\n"],["delete_from_epr","Openwsman::Client","Openwsman/Client.html#method-i-delete_from_epr","(p1, p2)","<p>WS-Delete\n<p>delete_from_epr: Remove a resource via an endpoint reference\n"],["delivery_mode","ClientOptions","ClientOptions.html#method-i-delivery_mode","()","<p>/*\n\n<pre>* Get subscription delivery mode (push, pushwithack,events,pull)\n*\n*</pre>\n"],["delivery_mode=","ClientOptions","ClientOptions.html#method-i-delivery_mode-3D","(p1)","<p>/*\n\n<pre>* Set subscription delivery mode (push, pushwithack,events,pull)\n*\n*</pre>\n"],["delivery_sec_mode","ClientOptions","ClientOptions.html#method-i-delivery_sec_mode","()","<p>/*\n\n<pre>* Get subscription delivery security mode\n*\n*</pre>\n"],["delivery_security_mode=","ClientOptions","ClientOptions.html#method-i-delivery_security_mode-3D","(p1)","<p>/*\n\n<pre>* Set subscription delivery security mode\n*\n* (auto, http basic, http digest, https basic, https digest, ...</pre>\n"],["delivery_uri","ClientOptions","ClientOptions.html#method-i-delivery_uri","()","<p>/*\n\n<pre>* Get delivery uri\n*\n*</pre>\n"],["delivery_uri=","ClientOptions","ClientOptions.html#method-i-delivery_uri-3D","(p1)","<p>/*\n\n<pre>* Set delivery uri\n*\n*</pre>\n"],["detail","Openwsman::Fault","Openwsman/Fault.html#method-i-detail","()","<p>/*\n\n<pre>* Fault detail\n*</pre>\n"],["detail","Openwsman::Status","Openwsman/Status.html#method-i-detail","()","<p>/*\n\n<pre>* Get the fault detail code\n*</pre>\n"],["detail=","Openwsman::Status","Openwsman/Status.html#method-i-detail-3D","(p1)","<p>/*\n\n<pre>* Set the fault detail code\n*</pre>\n"],["doc","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-doc","()","<p>/*\n\n<pre>* get XmlDoc to which node belongs\n*\n*</pre>\n"],["dump_file","Openwsman::XmlDoc","Openwsman/XmlDoc.html#method-i-dump_file","(p1)","<p>/*\n\n<pre>* dump document to file\n*\n*</pre>\n"],["dump_file","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-dump_file","(p1)","<p>/*\n\n<pre>* dump node to file\n*\n*</pre>\n"],["dumpfile=","Openwsman::Client","Openwsman/Client.html#method-i-dumpfile-3D","(p1)","<p>Set the dumpfile (for debugging) to dump xml requests\n"],["each","Openwsman::EndPointReference","Openwsman/EndPointReference.html#method-i-each","()","<p>enumerate over selectors as key,value pairs\n"],["each","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-each","(p1, p2)","<p>/*\n\n<pre>* iterate over children\n*\n* See also XmlNode#next\n*\n* XmlNode#each iterates over children, XmlNode#next ...</pre>\n"],["each_attr","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-each_attr","()","<p>/*\n\n<pre>* enumerate attributes\n*\n*</pre>\n"],["element","Openwsman::XmlDoc","Openwsman/XmlDoc.html#method-i-element","(p1)","<p>get soap element node by name returns nil if no element with the name can\nbe found\n"],["encode","Openwsman::XmlDoc","Openwsman/XmlDoc.html#method-i-encode","(p1)","<p>encode document as string with specific encoding (non-indented\nrepresentation)\n<p>encoding defaults to &#39;utf-8&#39; …\n"],["encoding","Openwsman::Client","Openwsman/Client.html#method-i-encoding","()","<p>Get client encoding\n"],["encoding","Openwsman::EnumerateInfo","Openwsman/EnumerateInfo.html#method-i-encoding","()","<p>/*\n\n<pre>* The current encoding (defaults to &#39;utf-8&#39;)\n*</pre>\n"],["encoding=","Openwsman::Client","Openwsman/Client.html#method-i-encoding-3D","(p1)","<p>Set client encoding\n"],["enum_idle_timeout=","Openwsman::Context","Openwsman/Context.html#method-i-enum_idle_timeout-3D","(p1)","<p>/*\n\n<pre>* Set the idle timeout for enumerations\n*</pre>\n"],["enumerate","Openwsman::Client","Openwsman/Client.html#method-i-enumerate","(p1, p2, p3)","<p>WS-Enumerate\n<p>enumerate: List resources\n<p>It is highly recommended to do an optimized enumeration by setting …\n"],["envelope","Openwsman::XmlDoc","Openwsman/XmlDoc.html#method-i-envelope","()","<p>get soap envelope node\n"],["epr","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-epr","(p1, p2, p3)","<p>/*\n\n<pre>* get end point reference\n*\n*</pre>\n"],["epr_prefix_for","Openwsman","Openwsman.html#method-c-epr_prefix_for","(classname, namespace = nil)","<p>return endpoint-reference (EPR) prefix for given classname and namespace\n<p><code>classname</code> - classname (using …\n"],["epr_to","Openwsman::EnumerateInfo","Openwsman/EnumerateInfo.html#method-i-epr_to","()","<p>/*\n\n<pre>* The URL of the endpoint receiving the enumeration\n*</pre>\n"],["epr_uri","Openwsman::EnumerateInfo","Openwsman/EnumerateInfo.html#method-i-epr_uri","()","<p>/*\n\n<pre>* The URI of the end point reference\n*</pre>\n"],["epr_uri_for","Openwsman","Openwsman.html#method-c-epr_uri_for","(namespace, classname)","<p>create full endpoint reference URI for namespace and classname\n<p><code>classname</code> - classname (using the &lt;schema&gt;_&lt;name&gt; …\n"],["error_string","Openwsman::Transport","Openwsman/Transport.html#method-i-error_string","(p1)","<p>/*\n\n<pre>* Get string corresponding to given error code\n*</pre>\n"],["fault","Openwsman::XmlDoc","Openwsman/XmlDoc.html#method-i-fault","()","<p>/*\n\n<pre>* retrieve fault data\n*\n*</pre>\n"],["fault_string","Openwsman::Client","Openwsman/Client.html#method-i-fault_string","()","<p>Get a string representation of the last fault\n"],["filter","Openwsman::EnumerateInfo","Openwsman/EnumerateInfo.html#method-i-filter","()","<p>/*\n\n<pre>* The Filter for this enumeration\n*</pre>\n"],["find","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-find","(p1, p2, p3)","<p>/*\n\n<pre>* find node within tree\n* a NULL passed as &#39;ns&#39; (namespace) is treated as wildcard\n*\n*</pre>\n"],["flags","ClientOptions","ClientOptions.html#method-i-flags","()","<p>/*\n\n<pre>* get option flag(s)\n* \n* return current flags bitmask\n*\n*</pre>\n"],["flags","Openwsman::EnumerateInfo","Openwsman/EnumerateInfo.html#method-i-flags","()","<p>/*\n\n<pre>* enumeration flags\n*</pre>\n"],["flags=","ClientOptions","ClientOptions.html#method-i-flags-3D","(p1)","<p>/*\n\n<pre>* set option flag(s)\n* \n* adds new flag(s) to options\n*\n*</pre>\n"],["fragment","ClientOptions","ClientOptions.html#method-i-fragment","()","<p>/*\n\n<pre>* Get fragment filter\n* See DSP0226, section 7.7.\n*\n*</pre>\n"],["fragment=","ClientOptions","ClientOptions.html#method-i-fragment-3D","(p1)","<p>/*\n\n<pre>* Set fragment filter\n* See DSP0226, section 7.7.\n* (Supported Dialects: XPATH)\n*\n*</pre>\n"],["fragment_string","Openwsman::Context","Openwsman/Context.html#method-i-fragment_string","(p1)","<p>/*\n\n<pre>* The fragment of the document\n*</pre>\n"],["generate_fault","Openwsman::Status","Openwsman/Status.html#method-i-generate_fault","(p1)","<p>/*\n\n<pre>* Create a new fault XmlDoc based on Status information\n*</pre>\n"],["generate_fault","Openwsman::XmlDoc","Openwsman/XmlDoc.html#method-i-generate_fault","(p1)","<p>Generate fault document based on given status\n<p>This creates a new XmlDoc instance representing a fault …\n"],["get","Openwsman::Client","Openwsman/Client.html#method-i-get","(p1, p2)","<p>WS-Transport\n<p>get: Get a resource\n"],["get","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-get","(p1, p2, p3)","<p>/*\n\n<pre>* get child by index\n*\n*</pre>\n"],["get_from_epr","Openwsman::Client","Openwsman/Client.html#method-i-get_from_epr","(p1, p2)","<p>WS-Get\n<p>get_from_epr: Get a resource via an endpoint reference\n"],["header","Openwsman::XmlDoc","Openwsman/XmlDoc.html#method-i-header","()","<p>get soap header node\n"],["heartbeat_interval","ClientOptions","ClientOptions.html#method-i-heartbeat_interval","()","<p>/*\n\n<pre>* Get subscription heartbeat interval (in seconds)\n*\n*</pre>\n"],["heartbeat_interval=","ClientOptions","ClientOptions.html#method-i-heartbeat_interval-3D","(p1)","<p>/*\n\n<pre>* Set subscription heartbeat interval (in seconds)\n*\n*</pre>\n"],["host","Openwsman::Client","Openwsman/Client.html#method-i-host","()","<p>The host part of the client URL\n"],["identify","Openwsman::Client","Openwsman/Client.html#method-i-identify","(p1)","<p>WS-Identify\n<p>identify: Sends an identify request\n"],["index","Openwsman::EnumerateInfo","Openwsman/EnumerateInfo.html#method-i-index","()","<p>/*\n\n<pre>* The current index (number of the last returned item)\n*</pre>\n"],["index=","Openwsman::EnumerateInfo","Openwsman/EnumerateInfo.html#method-i-index-3D","(p1)","<p>/*\n\n<pre>* Set a specific index (used to skip ahead)\n*</pre>\n"],["indoc","Openwsman::Context","Openwsman/Context.html#method-i-indoc","()","<p>/*\n\n<pre>* The incoming XmlDoc\n*</pre>\n"],["indoc","Openwsman::SoapOp","Openwsman/SoapOp.html#method-i-indoc","()","<p>/*\n\n<pre>* The incoming XmlDoc\n*</pre>\n"],["indoc=","Openwsman::SoapOp","Openwsman/SoapOp.html#method-i-indoc-3D","(p1)","<p>/*\n\n<pre>* Set the incoming XmlDoc\n*</pre>\n"],["invoke","Openwsman::Client","Openwsman/Client.html#method-i-invoke","(p1, p2, p3, p4)","<p>WS-Invoke\n<p>invoke: Invoke a resource function\n"],["is_auth_method","Openwsman::Transport","Openwsman/Transport.html#method-i-is_auth_method","(p1)","<p>/*\n\n<pre>* Check if the passed method id is valid for authentication\n*</pre>\n"],["is_end_of_sequence","Openwsman::XmlDoc","Openwsman/XmlDoc.html#method-i-is_end_of_sequence","()","<p>/*\n\n<pre>* Check if document represents an end of sequence (last enumeration item)\n*\n*</pre>\n"],["is_fault","Openwsman::XmlDoc","Openwsman/XmlDoc.html#method-i-is_fault","()","<p>Check if document represents a fault\n"],["key","Openwsman::Transport","Openwsman/Transport.html#method-i-key","()","<p>Get the key\n"],["key=","Openwsman::Transport","Openwsman/Transport.html#method-i-key-3D","(p1)","<p>Set the key\n"],["lang=","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-lang-3D","(p1)","<p>/*\n\n<pre>* set language\n*\n*</pre>\n"],["last_error","Openwsman::Client","Openwsman/Client.html#method-i-last_error","()","<p>Get a numeric representation of the last fault\n"],["max_elements","ClientOptions","ClientOptions.html#method-i-max_elements","()","<p>/*\n\n<pre>* Return enumeration elements limit\n*\n*</pre>\n"],["max_elements","Openwsman::Context","Openwsman/Context.html#method-i-max_elements","(p1)","<p>/*\n\n<pre>* The maximum elements of the document\n*</pre>\n"],["max_elements=","ClientOptions","ClientOptions.html#method-i-max_elements-3D","(p1)","<p>/*\n\n<pre>* Limit number of elements returned by enumeration\n*\n*</pre>\n"],["max_envelope_size","ClientOptions","ClientOptions.html#method-i-max_envelope_size","()","<p>/*\n\n<pre>* Return size limit of result document\n*\n*</pre>\n"],["max_envelope_size","Openwsman::Context","Openwsman/Context.html#method-i-max_envelope_size","(p1)","<p>/*\n\n<pre>* The maximum envelope size of the document\n*</pre>\n"],["max_envelope_size=","ClientOptions","ClientOptions.html#method-i-max_envelope_size-3D","(p1)","<p>/*\n\n<pre>* Limit size of result document\n*\n*</pre>\n"],["max_items","Openwsman::EnumerateInfo","Openwsman/EnumerateInfo.html#method-i-max_items","()","<p>/*\n\n<pre>* Return the maximum number of items that will be returned by this enumeration\n*</pre>\n"],["max_items=","Openwsman::EnumerateInfo","Openwsman/EnumerateInfo.html#method-i-max_items-3D","(p1)","<p>/*\n\n<pre>* Set the maximum number of items returned by this enumeration\n*</pre>\n"],["maxsize","Openwsman::SoapOp","Openwsman/SoapOp.html#method-i-maxsize","()","<p>/*\n\n<pre>* The maximum size (on the wire) of this operation\n*</pre>\n"],["method","Openwsman::Context","Openwsman/Context.html#method-i-method","()","<p>/*\n\n<pre>* The method name\n*</pre>\n"],["method_args","Openwsman::Context","Openwsman/Context.html#method-i-method_args","(p1)","<p>/*\n\n<pre>* The method arguments\n*</pre>\n"],["msg","Openwsman::SoapOp","Openwsman/SoapOp.html#method-i-msg","()","<p>/*\n\n<pre>* The raw (SOAP) message for this operation\n*</pre>\n"],["msg","Openwsman::Status","Openwsman/Status.html#method-i-msg","()","<p>/*\n\n<pre>* Get the fault message\n*</pre>\n"],["msg=","Openwsman::Status","Openwsman/Status.html#method-i-msg-3D","(p1)","<p>/*\n\n<pre>* Set the fault message\n*</pre>\n"],["name","Openwsman::XmlAttr","Openwsman/XmlAttr.html#method-i-name","()","<p>/*\n\n<pre>* get name for attr\n*\n*</pre>\n"],["name","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-name","()","<p>/*\n\n<pre>* get name for node\n*\n*</pre>\n"],["name=","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-name-3D","(p1)","<p>/*\n\n<pre>* set name of node\n*\n*</pre>\n"],["namespace","Openwsman::EndPointReference","Openwsman/EndPointReference.html#method-i-namespace","(p1)","<p>Namespace of EPR\n"],["new","Openwsman::Client","Openwsman/Client.html#method-c-new","(p1)","<p>Create a client connection.\n<p>There are two ways to connect to a client, either by specifying a URL or by\n…\n"],["new","Openwsman::EndPointReference","Openwsman/EndPointReference.html#method-c-new","(p1, p2, p3)","<p>Create EndPointReference from URI (String) or XML (XmlNode or XmlDoc)\n"],["new","Openwsman::Fault","Openwsman/Fault.html#method-c-new","(p1)","<p>/*\n\n<pre>* Create a Fault representation of a failed WS-Management result doc\n*</pre>\n"],["new","Openwsman::Filter","Openwsman/Filter.html#method-c-new","(p1)","<p>Create empty filter\n"],["new","Openwsman::Status","Openwsman/Status.html#method-c-new","(p1, p2, p3)","<p>/*\n\n<pre>* Create a new Status object\n*\n*</pre>\n"],["new","Openwsman::XmlDoc","Openwsman/XmlDoc.html#method-c-new","(p1, p2)","<p>Create XmlDoc with node name optionally pass namespace as 2nd arg (defaults\nto NULL)\n"],["next","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-next","(p1)","<p>iterate over siblings\n<p>finds next sibling with same namespace and name\n<p>See also XmlNode#each\n"],["ns","Openwsman::XmlAttr","Openwsman/XmlAttr.html#method-i-ns","()","<p>/*\n\n<pre>* get namespace for attr\n*\n*</pre>\n"],["ns","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-ns","()","<p>/*\n\n<pre>* get namespace for node\n*\n*</pre>\n"],["ns=","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-ns-3D","(p1)","<p>/*\n\n<pre>* set namespace of node\n*\n*</pre>\n"],["option_set","Openwsman::Context","Openwsman/Context.html#method-i-option_set","(p1, p2)","<p>/*\n\n<pre>* The option set\n*</pre>\n"],["options","ClientOptions","ClientOptions.html#method-i-options","(p1)","<p>/*\n\n<pre>* Get options (for OptionSet) as Hash\n*\n*</pre>\n"],["options=","ClientOptions","ClientOptions.html#method-i-options-3D","(p1)","<p>/*\n\n<pre>* Set options (for OptionSet) from Hash\n*\n* NOTE:\n* the values must be properly escaped (replace &amp; ...</pre>\n"],["outdoc","Openwsman::SoapOp","Openwsman/SoapOp.html#method-i-outdoc","()","<p>/*\n\n<pre>* The outgoing XmlDoc\n*</pre>\n"],["outdoc=","Openwsman::SoapOp","Openwsman/SoapOp.html#method-i-outdoc-3D","(p1)","<p>/*\n\n<pre>* Set the outgoing XmlDoc\n*</pre>\n"],["parent","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-parent","()","<p>/*\n\n<pre>* get parent for node\n*\n*</pre>\n"],["parse_enum_request","Openwsman::Context","Openwsman/Context.html#method-i-parse_enum_request","(p1)","<p>/*\n\n<pre>* Parse enumeration request\n*</pre>\n"],["password","Openwsman::Client","Openwsman/Client.html#method-i-password","()","<p>The password used for authentication\n"],["password","Openwsman::Transport","Openwsman/Transport.html#method-i-password","()","<p>/*\n\n<pre>* Server credentials\n* Get the password part of the http transport credentials\n*</pre>\n"],["password=","Openwsman::Transport","Openwsman/Transport.html#method-i-password-3D","(p1)","<p>/*\n\n<pre>* Server credentials\n* Set the password part of the http transport credentials\n*</pre>\n"],["path","Openwsman::Client","Openwsman/Client.html#method-i-path","()","<p>The path of the clien URL\n"],["port","Openwsman::Client","Openwsman/Client.html#method-i-port","()","<p>The TCP port used in the connection\n"],["prefix","Openwsman::EndPointReference","Openwsman/EndPointReference.html#method-i-prefix","(p1)","<p>Prefix of EPR\n"],["prefix","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-prefix","()","<p>/*\n\n<pre>* get prefix of nodes namespace\n*\n*</pre>\n"],["properties","ClientOptions","ClientOptions.html#method-i-properties","(p1)","<p>/*\n\n<pre>* Get properties as Hash\n*\n*</pre>\n"],["properties=","ClientOptions","ClientOptions.html#method-i-properties-3D","(p1)","<p>/*\n\n<pre>* Set properties from Hash\n*\n*</pre>\n"],["proxy","Openwsman::Transport","Openwsman/Transport.html#method-i-proxy","()","<p>Get http proxy URL\n"],["proxy=","Openwsman::Transport","Openwsman/Transport.html#method-i-proxy-3D","(p1)","<p>Set http proxy URL\n<p>Pass nil to disable proxy communication\n<p>Example\n"],["proxy_password","Openwsman::Transport","Openwsman/Transport.html#method-i-proxy_password","()","<p>/*\n\n<pre>* Windows clients: HTTP proxy credentials\n*\n* Get the password part of the http proxy credentials\n*</pre>\n"],["proxy_password=","Openwsman::Transport","Openwsman/Transport.html#method-i-proxy_password-3D","(p1)","<p>/*\n\n<pre>* Windows clients: HTTP proxy credentials\n*\n* Set the password part of the http proxy credentials\n*</pre>\n"],["proxy_username","Openwsman::Transport","Openwsman/Transport.html#method-i-proxy_username","()","<p>/*\n\n<pre>* Windows clients: HTTP proxy credentials\n*\n* Get the username part of the http proxy credentials\n*</pre>\n"],["proxy_username=","Openwsman::Transport","Openwsman/Transport.html#method-i-proxy_username-3D","(p1)","<p>/*\n\n<pre>* Windows clients: HTTP proxy credentials\n*\n* Set the username part of the http proxy credentials\n*</pre>\n"],["proxyauth","Openwsman::Transport","Openwsman/Transport.html#method-i-proxyauth","()","<p>/*\n\n<pre>* Linux clients: HTTP proxy credentials\n*\n* Get the proxy username and password as &quot;username:password&quot; ...</pre>\n"],["proxyauth=","Openwsman::Transport","Openwsman/Transport.html#method-i-proxyauth-3D","(p1)","<p>Linux clients: HTTP proxy credentials\n<p>Set the proxy username and password\n<p>Example\n"],["pull","Openwsman::Client","Openwsman/Client.html#method-i-pull","(p1, p2, p3, p4)","<p>WS-Transport\n<p>pull: Get resources from enumeration context\n"],["pull_result","Openwsman::EnumerateInfo","Openwsman/EnumerateInfo.html#method-i-pull_result","()","<p>/*\n\n<pre>* XmlDoc representing the result pulled last\n*</pre>\n"],["pull_result=","Openwsman::EnumerateInfo","Openwsman/EnumerateInfo.html#method-i-pull_result-3D","(p1)","<p>/*\n\n<pre>* Set the pull result (XmlDoc)\n*\n* Used for server-side plugin extensions\n*</pre>\n"],["put","Openwsman::Client","Openwsman/Client.html#method-i-put","(p1, p2, p3, p4, p5)","<p>WS-Transport\n<p>put: Change a resource\n"],["reason","Openwsman::Fault","Openwsman/Fault.html#method-i-reason","()","<p>/*\n\n<pre>* Fault reason\n*</pre>\n"],["reference","ClientOptions","ClientOptions.html#method-i-reference","()","<p>/*\n\n<pre>* Get WS-Addressing reference properties\n* Returns the string representation of a valid XML document ...</pre>\n"],["reference=","ClientOptions","ClientOptions.html#method-i-reference-3D","(p1)","<p>/*\n\n<pre>* Set WS-Addressing reference properties\n* Argument must the string representation of a valid XML document ...</pre>\n"],["references","Openwsman::Filter","Openwsman/Filter.html#method-i-references","(p1, p2, p3, p4, p5, p6, p7)","<p>Set references filter\n"],["release","Openwsman::Client","Openwsman/Client.html#method-i-release","(p1, p2, p3)","<p>WS-Release\n<p>release: Release enumeration context\n"],["remove","Openwsman::XmlAttr","Openwsman/XmlAttr.html#method-i-remove","()","<p>/*\n\n<pre>* remove note attribute\n*\n*</pre>\n"],["renew","Openwsman::Client","Openwsman/Client.html#method-i-renew","(p1, p2, p3)","<p>WS-Eventing\n<p>renew: Renew a subscription\n"],["reset_flags","ClientOptions","ClientOptions.html#method-i-reset_flags","()","<p>/*\n\n<pre>* reset option flags\n* \n* sets option flags bitmask to FLAG_NONE\n*\n*</pre>\n"],["resource_uri","Openwsman::Context","Openwsman/Context.html#method-i-resource_uri","(p1)","<p>/*\n\n<pre>* The resource uri\n*</pre>\n"],["resource_uri","Openwsman::EndPointReference","Openwsman/EndPointReference.html#method-i-resource_uri","(p1)","<p>The resource URI associated to this EndPointReference\n"],["response_code","Openwsman::Client","Openwsman/Client.html#method-i-response_code","()","<p>Response code of the last request (HTTP response code)\n"],["root","Openwsman::XmlDoc","Openwsman/XmlDoc.html#method-i-root","()","<p>get root node of doc\n"],["runtime","Openwsman::Context","Openwsman/Context.html#method-i-runtime","()","<p>/*\n\n<pre>* Get the Soap runtime environment\n*</pre>\n"],["scheme","Openwsman::Client","Openwsman/Client.html#method-i-scheme","()","<p>/*\n\n<pre>* String representation of the transport scheme\n*\n*</pre>\n"],["selector","Openwsman::Context","Openwsman/Context.html#method-i-selector","(p1, p2, p3)","<p>/*\n\n<pre>* The selector for an element\n*</pre>\n"],["selector","Openwsman::EndPointReference","Openwsman/EndPointReference.html#method-i-selector","(p1)","<p>Get value of selector by name epr#selector converts any value passed to\nString\n<p>Shortcut\n<p>epr.selector(“name”) …\n"],["selector_count","Openwsman::EndPointReference","Openwsman/EndPointReference.html#method-i-selector_count","(p1)","<p>Number of selectors\n"],["selector_names","Openwsman::EndPointReference","Openwsman/EndPointReference.html#method-i-selector_names","(p1)","<p>Return list of selector names\n"],["selectors","ClientOptions","ClientOptions.html#method-i-selectors","(p1)","<p>/*\n\n<pre>* Get selectors as Hash\n*\n*</pre>\n"],["selectors","Openwsman::Context","Openwsman/Context.html#method-i-selectors","(p1)","<p>/*\n\n<pre>* The selectors for a document\n*</pre>\n"],["selectors=","ClientOptions","ClientOptions.html#method-i-selectors-3D","(p1)","<p>/*\n\n<pre>* Set selectors from Hash\n*\n* NOTE:\n* the values must be properly escaped (replace &amp; with &amp;amp;, etc.) ...</pre>\n"],["selectors_from_epr","Openwsman::Context","Openwsman/Context.html#method-i-selectors_from_epr","(p1)","<p>/*\n\n<pre>* The selectors from an endpoint reference\n*</pre>\n"],["selectors_from_filter","Openwsman::Context","Openwsman/Context.html#method-i-selectors_from_filter","(p1)","<p>/*\n\n<pre>* The selectors from a filter\n*</pre>\n"],["send_request","Openwsman::Client","Openwsman/Client.html#method-i-send_request","(p1)","<p>Send a (raw) SOAP request to the client\n"],["serialize","Openwsman::EndPointReference","Openwsman/EndPointReference.html#method-i-serialize","(p1, p2, p3, p4)","<p>Serialization\n<p>XML-serialize EndPointReference as child (with namespace and name) of node\n"],["set_dump_request","ClientOptions","ClientOptions.html#method-i-set_dump_request","(p1)","<p>/*\n\n<pre>* Request to dump all operations to the dumpfile\n*\n* Used for debugging on the wire-level\n*\n* See also: ...</pre>\n"],["simple","Openwsman::Filter","Openwsman/Filter.html#method-i-simple","(p1, p2)","<p>Set simple dialect/query filter\n"],["size","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-size","(p1, p2)","<p>count node children if name given, count children with this name if name +\nns given, count children with …\n"],["soap","Openwsman::SoapOp","Openwsman/SoapOp.html#method-i-soap","()","<p>/*\n\n<pre>* The Soap instance of this operation\n*</pre>\n"],["string","Openwsman::XmlDoc","Openwsman/XmlDoc.html#method-i-string","()","<p>/*\n\n<pre>* generic (indented) string representation of the XmlDoc UTF-8 encoded.\n* see encode for setting the ...</pre>\n"],["string","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-string","()","<p>/*\n\n<pre>* dump node as XML string\n*\n* alias: to_xml\n*\n*</pre>\n"],["sub_expiry","ClientOptions","ClientOptions.html#method-i-sub_expiry","()","<p>/*\n\n<pre>* Get subscription expiry timeout (in seconds)\n*\n*</pre>\n"],["sub_expiry=","ClientOptions","ClientOptions.html#method-i-sub_expiry-3D","(p1)","<p>/*\n\n<pre>* Set subscription expiry timeout (in seconds)\n*\n*</pre>\n"],["subcode","Openwsman::Fault","Openwsman/Fault.html#method-i-subcode","()","<p>/*\n\n<pre>* Fault subcode\n*</pre>\n"],["subscribe","Openwsman::Client","Openwsman/Client.html#method-i-subscribe","(p1, p2, p3)","<p>WS-Eventing\n<p>subscribe: Subscribe a listener to events\n"],["text","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-text","()","<p>/*\n\n<pre>* get text (without xml tags) of node\n*\n* alias: to_s\n*\n*</pre>\n"],["text=","Openwsman::XmlNode","Openwsman/XmlNode.html#method-i-text-3D","(p1)","<p>/*\n\n<pre>* Set text of node\n*\n*</pre>\n"],["timeout","ClientOptions","ClientOptions.html#method-i-timeout","()","<p>/*\n\n<pre>* Return operation timeout in milliseconds\n* See Openwsman::Transport.timeout for transport timeout ...</pre>\n"],["timeout","Openwsman::Transport","Openwsman/Transport.html#method-i-timeout","()","<p>/*\n\n<pre>* Get the transport timeout in seconds\n*</pre>\n"],["timeout=","ClientOptions","ClientOptions.html#method-i-timeout-3D","(p1)","<p>/*\n\n<pre>* Operation timeout in milliseconds\n* See Openwsman::Transport.timeout for transport timeout\n*\n*</pre>\n"],["timeout=","Openwsman::Transport","Openwsman/Transport.html#method-i-timeout-3D","(p1)","<p>Set the transport timeout in seconds\n<p>Note\n<p>This is the http layer timeout. Not to be confused with the WS-Management …\n"],["to_s","Openwsman::EndPointReference","Openwsman/EndPointReference.html#method-i-to_s","()","<p>String representation (&lt;uri&gt;?&lt;selector&gt;,&lt;selector&gt;,…)\n"],["to_s","Openwsman::Status","Openwsman/Status.html#method-i-to_s","()","<p>/*\n\n<pre>* String representation (returns the fault message)\n*</pre>\n"],["to_xml","Openwsman::EndPointReference","Openwsman/EndPointReference.html#method-i-to_xml","(p1, p2)","<p>String representation (XML syntax)\n"],["total_items","Openwsman::EnumerateInfo","Openwsman/EnumerateInfo.html#method-i-total_items","()","<p>The total number of items in this enumeration\n<p>index is the number already returned, this is the total …\n"],["total_items=","Openwsman::EnumerateInfo","Openwsman/EnumerateInfo.html#method-i-total_items-3D","(p1)","<p>Set the total number of items in this enumeration\n"],["transport","Openwsman::Client","Openwsman/Client.html#method-i-transport","()","<p>The Transport instance associated to the client\n"],["unsubscribe","Openwsman::Client","Openwsman/Client.html#method-i-unsubscribe","(p1, p2, p3, p4)","<p>WS-Eventing\n<p>unsubscribe: Remove a listener from events\n"],["uri_classname","Openwsman","Openwsman.html#method-i-uri_classname","(p1)","<p>get classname from resource URI\n"],["uri_prefix","Openwsman","Openwsman.html#method-i-uri_prefix","(p1)","<p>Map classname (class schema) to resource uri prefix\n"],["user","Openwsman::Client","Openwsman/Client.html#method-i-user","()","<p>The user name used for authentication\n"],["username","Openwsman::Transport","Openwsman/Transport.html#method-i-username","()","<p>/*\n\n<pre>* Server credentials\n* Get the username part of the http transport credentials\n*</pre>\n"],["username=","Openwsman::Transport","Openwsman/Transport.html#method-i-username-3D","(p1)","<p>/*\n\n<pre>* Server credentials\n* Set the username part of the http transport credentials\n*</pre>\n"],["value","Openwsman::XmlAttr","Openwsman/XmlAttr.html#method-i-value","()","<p>/*\n\n<pre>* get value for attr\n*\n*</pre>\n"],["verify_host","Openwsman::Transport","Openwsman/Transport.html#method-i-verify_host","()","<p>/*\n\n<pre>* Host to be verified ?\n*</pre>\n"],["verify_host=","Openwsman::Transport","Openwsman/Transport.html#method-i-verify_host-3D","(p1)","<p>verify the host in SSL communication ?\n<p>If passed <code>false</code>, <code>nil</code>, or 0: disable peer\nverification else: enable …\n"],["verify_peer","Openwsman::Transport","Openwsman/Transport.html#method-i-verify_peer","()","<p>/*\n\n<pre>* Peer to be verified ?\n*</pre>\n"],["verify_peer=","Openwsman::Transport","Openwsman/Transport.html#method-i-verify_peer-3D","(p1)","<p>verify the peer in SSL communication ?\n<p>If passed <code>false</code>, <code>nil</code>, or 0: disable peer\nverification else: enable …\n"],["wql","Openwsman::Filter","Openwsman/Filter.html#method-i-wql","(p1)","<p>Set WQL (WS-Management query language) filter\n"],["xpath","Openwsman::Filter","Openwsman/Filter.html#method-i-xpath","(p1)","<p>Set XPath filter\n"],["README","","README_rdoc.html","","<p>Openwsman - WS-Management for all\n<p>home  &mdash; openwsman.github.io\n<p>wiki  &mdash; github.com/Openwsman/openwsman/wiki\n"]]}}